#lang racket
(require data/heap)
(provide sim? wire?
         (contract-out
          [make-sim        (-> sim?)]
          [sim-wait!       (-> sim? positive? void?)]
          [sim-time        (-> sim? real?)]
          [sim-add-action! (-> sim? positive? (-> any/c) void?)]

          [make-wire       (-> sim? wire?)]
          [wire-on-change! (-> wire? (-> any/c) void?)]
          [wire-value      (-> wire? boolean?)]
          [wire-set!       (-> wire? boolean? void?)]

          [bus-value (-> (listof wire?) natural?)]
          [bus-set!  (-> (listof wire?) natural? void?)]

          [gate-not  (-> wire? wire? void?)]
          [gate-and  (-> wire? wire? wire? void?)]
          [gate-nand (-> wire? wire? wire? void?)]
          [gate-or   (-> wire? wire? wire? void?)]
          [gate-nor  (-> wire? wire? wire? void?)]
          [gate-xor  (-> wire? wire? wire? void?)]

;          [wire-not  (-> wire? wire?)]
;          [wire-and  (-> wire? wire? wire?)]
;          [wire-nand (-> wire? wire? wire?)]
;          [wire-or   (-> wire? wire? wire?)]
;          [wire-nor  (-> wire? wire? wire?)]
;          [wire-xor  (-> wire? wire? wire?)]

#;          [flip-flop (-> wire? wire? wire? void?)]))

(struct sim ([time #:mutable] [actions-queue #:mutable]))
(struct wire ([value #:mutable] [actions-queue #:mutable] sim))

(define (sort e1 e2) ;sortowanie po czasach danych zdarzen
  (if (<= (car e1) (car e2))
      #t
      #f))

(define (make-sim) ;tworzenie symulacji
  (sim 0 (make-heap sort)))

(define (sim-wait! sim time)
  (if (and (not (equal? 0 (heap-count (sim-actions-queue sim)))) (<= (+ time (sim-time sim)) (car (heap-min (sim-actions-queue sim))))) ;jesli 1 akcja ma czas <= sim-time
      (let ([first (heap-min (sim-actions-queue sim))])
        (begin
          (heap-remove-min! (sim-actions-queue sim)) ;zdejmij element z kolejki
          (set-sim-time! sim (car first)) ;ustaw aktualny czas na czas akcji
          (cdr first) ;wykonaj akcje
          (define next (- (+ time (sim-time sim)) (car first))) ;ustaw czas po wykonaniu
          (sim-wait! sim next))) ;wykonaj pozostale akcje z zaaktualizowanym czasem
      (set-sim-time! sim (+ time (sim-time sim))))) ;na koncu ustawiamy odpowiedni czas

(define (make-wire sim) ;tworzenie przewodow (na domyslnych wartosciach zmiennych)
  (wire #f null sim))

(define (call-each procs) ; wywolywanie procedur po kolei
  (if (null? procs)
      (void)
      (begin
        (car procs)
        (call-each (cdr procs)))))

(define (sim-add-action! sim time proc) ;dodanie akcji do kolejki (kopca)
  (heap-add! (sim-actions-queue sim) (cons (+ time (sim-time sim)) proc)))

(define (wire-on-change! wire action) ;dodanie akcji wykonywanych przy kazdej zmianie wartosci
  (begin
    (set-wire-actions-queue! wire (append (wire-actions-queue wire) action)) ;samo dodanie akcji
    (action))) ;natychmiastowe wywolanie

(define (wire-set! wire val) ;ustawienie wartosci przewodu
  (if (not (equal? val (wire-value wire))) ;jesli sie rozni od aktualnej
      (begin
        (set-wire-value! wire val) ;to ustawic
        (call-each (wire-actions-queue wire))) ;i od razu wywolac wszystkie akcje
      (void))) ;jesli nie to nie robic nic

(define (bus-set! wires value)
  (match wires
    ['() (void)]
    [(cons w wires)
     (begin
       (wire-set! w (= (modulo value 2) 1))
       (bus-set! wires (quotient value 2)))]))

(define (bus-value ws)
  (foldr (lambda (w value) (+ (if (wire-value w) 1 0) (* 2 value)))
         0
         ws))

(define (gate-not in out)
  (define (not-action)
    (sim-add-action! (wire-sim out) 1 (lambda () (wire-set! out (not (wire-value in))))))
  (wire-on-change! in (not-action)))

(define (gate-and in1 in2 out)
  (define (and-action)
    (sim-add-action! (wire-sim out) 1 (lambda () (wire-set! out (and (wire-value in1) (wire-value in2)))))
  (wire-on-change! in1 (and-action)))
  (wire-on-change! in2 (and-action)))

(define (gate-or in1 in2 out)
  (define (or-action)
    (sim-add-action! (wire-sim out) 1 (lambda () (wire-set! out (or (wire-value in1) (wire-value in2)))))
  (wire-on-change! in1 (or-action)))
  (wire-on-change! in2 (or-action)))

(define (gate-nand in1 in2 out)
  (define (nand-action)
    (sim-add-action! (wire-sim out) 1 (lambda () (wire-set! out (nand (wire-value in1) (wire-value in2)))))
  (wire-on-change! in1 (nand-action)))
  (wire-on-change! in2 (nand-action)))

#;(define (flip-flop out clk data)
  (define sim (wire-sim data))
  (define w1  (make-wire sim))
  (define w2  (make-wire sim))
  (define w3  (wire-nand (wire-and w1 clk) w2))
  (gate-nand w1 clk (wire-nand w2 w1))
  (gate-nand w2 w3 data)
  (gate-nand out w1 (wire-nand out w3)))
